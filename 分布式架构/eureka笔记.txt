
环境搭建（服务端）
springcloud 的eureka（注册中心）

依赖于springboot  

从官网 引入pom依赖 

声明springboot 

 jdk   

 声明springcloud  
 <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

引入eureka

<!-- eureka服务端的启动器-->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
        </dependency>



配置配置文件


eureka.client.register-with-eureka=false
eureka.client.fetch-registry=false

eureka.client.serviceUrl.defaultZone=http://localhost:${server.port}/eureka/
  

加对应的注解

@EnableEurekaServer







环境搭建（客户端）
springcloud 的eureka

依赖于springboot  

从官网 引入pom依赖 

声明springboot 

 jdk   

 声明springcloud  
 <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

引入eureka

<!-- eureka服务端的启动器-->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
        </dependency>



配置配置文件
spring.application.name=服务名

eureka.client.serviceUrl.defaultZone=http://localhost:${server.port}/eureka/
  

加对应的注解

@EnableEurekaClient



eureka的自我保护机制 参考

https://www.cnblogs.com/cnsec/p/13286632.html

https://www.cnblogs.com/xishuai/archive/2018/04/20/spring-cloud-eureka-safe.html

接口之间的调用    httpclient    


resttemplate  （接口之间调用   对httpclient进行的封装）

使用    在springboot项目的启动类上  

    @Bean //全局声明restTemplate
    public RestTemplate restTemplate() {
        return new RestTemplate();
    }


在需要的地方  注入resttemplate 即可使用




